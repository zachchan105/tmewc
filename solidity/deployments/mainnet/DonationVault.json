{
  "address": "0xa544b70dC6af906862f68eb8e68c27bb7150e672",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Bank",
          "name": "_bank",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "donatedAmount",
          "type": "uint256"
        }
      ],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "contract Bank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "receiveBalanceApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "depositors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "depositedAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "receiveBalanceIncrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c6998485393862491877bbfa9a1b24a4be0fd1976a8b158c579ee530b8a8510",
  "receipt": {
    "to": null,
    "from": "0x123694886DBf5Ac94DDA07135349534536D14cAf",
    "contractAddress": "0xa544b70dC6af906862f68eb8e68c27bb7150e672",
    "transactionIndex": 69,
    "gasUsed": "586461",
    "logsBloom": "0x
    "blockHash": "0x495251c47cd39875ad320b4b94763fd4be5532848ef8a9c6f4003e7db2b3fecc",
    "transactionHash": "0x7c6998485393862491877bbfa9a1b24a4be0fd1976a8b158c579ee530b8a8510",
    "logs": [],
    "blockNumber": 16397522,
    "cumulativeGasUsed": "10253624",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x65Fbae61ad2C8836fFbFB502A0dA41b0789D9Fc6"
  ],
  "numDeployments": 1,
  "solcInputHash": "887fad6b16575ba42183543c324eeb0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Bank\",\"name\":\"_bank\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donatedAmount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract Bank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveBalanceApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositedAmounts\",\"type\":\"uint256[]\"}],\"name\":\"receiveBalanceIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"donate(uint256)\":{\"details\":\"Requirements:      - The caller's balance in the Bank must be greater than or equal        to the `amount`,      - Donation Vault must have an allowance for caller's balance in        the Bank for at least `amount`.\",\"params\":{\"amount\":\"Amount of the Bank balance to donate.\"}},\"receiveBalanceApproval(address,uint256,bytes)\":{\"details\":\"Requirements:      - Can only be called by the Bank via `approveBalanceAndCall`,      - The `owner` balance in the Bank must be greater than or equal        to the `amount`.\",\"params\":{\"amount\":\"The amount of the Bank balance approved by the owner        to be used by the vault.\",\"owner\":\"Address of the Bank balance owner who approved their        balance to be used by the vault.\"}},\"receiveBalanceIncrease(address[],uint256[])\":{\"details\":\"Requirements:      - Can only be called by the Bank after the Bridge swept deposits        and Bank increased balance for the vault,      - The `depositors` array must not be empty,      - The `depositors` array length must be equal to the        `depositedAmounts` array length.\",\"params\":{\"depositedAmounts\":\"Amounts deposited by individual depositors and        swept.\",\"depositors\":\"Addresses of depositors whose deposits have been swept.\"}}},\"title\":\"MEWC donation vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"donate(uint256)\":{\"notice\":\"Transfers the given `amount` of the Bank balance from the         caller to the Donation Vault and immediately decreases the         vault's balance in the Bank by the transferred `amount`.\"},\"receiveBalanceApproval(address,uint256,bytes)\":{\"notice\":\"Transfers the given `amount` of the Bank balance from the         `owner` to the Donation Vault and immediately decreases the         vault's balance in the Bank by the transferred `amount`.\"},\"receiveBalanceIncrease(address[],uint256[])\":{\"notice\":\"Ignores the deposited amounts and does not increase depositors'         individual balances. The vault decreases its own tMEWC balance         in the Bank by the total deposited amount.\"}},\"notice\":\"Vault that allows making MEWC donations to the system. Upon deposit,         this vault does not increase depositors' balances and always         decreases its own balance in the same transaction. The vault also         allows making donations using existing Bank balances.         BEWARE: ALL MEWC DEPOSITS TARGETING THIS VAULT ARE NOT REDEEMABLE         AND THERE IS NO WAY TO RESTORE THE DONATED BALANCE.         USE THIS VAULT ONLY WHEN YOU REALLY KNOW WHAT YOU ARE DOING!\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/DonationVault.sol\":\"DonationVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bank/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IReceiveBalanceApproval.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/// @title Meowcoin Bank\\n/// @notice Bank is a central component tracking Meowcoin balances. Balances can\\n///         be transferred between balance owners, and balance owners can\\n///         approve their balances to be spent by others. Balances in the Bank\\n///         are updated for depositors who deposited their Meowcoin into the\\n///         Bridge and only the Bridge can increase balances.\\n/// @dev Bank is a governable contract and the Governance can upgrade the Bridge\\n///      address.\\ncontract Bank is Ownable {\\n    address public bridge;\\n\\n    /// @notice The balance of the given account in the Bank. Zero by default.\\n    mapping(address => uint256) public balanceOf;\\n\\n    /// @notice The remaining amount of balance a spender will be\\n    ///         allowed to transfer on behalf of an owner using\\n    ///         `transferBalanceFrom`. Zero by default.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @notice Returns the current nonce for an EIP2612 permission for the\\n    ///         provided balance owner to protect against replay attacks. Used\\n    ///         to construct an EIP2612 signature provided to the `permit`\\n    ///         function.\\n    mapping(address => uint256) public nonces;\\n\\n    uint256 public immutable cachedChainId;\\n    bytes32 public immutable cachedDomainSeparator;\\n\\n    /// @notice Returns an EIP2612 Permit message hash. Used to construct\\n    ///         an EIP2612 signature provided to the `permit` function.\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    event BalanceTransferred(\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event BalanceApproved(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    event BalanceIncreased(address indexed owner, uint256 amount);\\n\\n    event BalanceDecreased(address indexed owner, uint256 amount);\\n\\n    event BridgeUpdated(address newBridge);\\n\\n    modifier onlyBridge() {\\n        require(msg.sender == address(bridge), \\\"Caller is not the bridge\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        cachedChainId = block.chainid;\\n        cachedDomainSeparator = buildDomainSeparator();\\n    }\\n\\n    /// @notice Allows the Governance to upgrade the Bridge address.\\n    /// @dev The function does not implement any governance delay and does not\\n    ///      check the status of the Bridge. The Governance implementation needs\\n    ///      to ensure all requirements for the upgrade are satisfied before\\n    ///      executing this function.\\n    ///      Requirements:\\n    ///      - The new Bridge address must not be zero.\\n    /// @param _bridge The new Bridge address.\\n    function updateBridge(address _bridge) external onlyOwner {\\n        require(_bridge != address(0), \\\"Bridge address must not be 0x0\\\");\\n        bridge = _bridge;\\n        emit BridgeUpdated(_bridge);\\n    }\\n\\n    /// @notice Moves the given `amount` of balance from the caller to\\n    ///         `recipient`.\\n    /// @dev Requirements:\\n    ///       - `recipient` cannot be the zero address,\\n    ///       - the caller must have a balance of at least `amount`.\\n    /// @param recipient The recipient of the balance.\\n    /// @param amount The amount of the balance transferred.\\n    function transferBalance(address recipient, uint256 amount) external {\\n        _transferBalance(msg.sender, recipient, amount);\\n    }\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's\\n    ///         balance. Does not allow updating an existing allowance to\\n    ///         a value that is non-zero to avoid someone using both the old and\\n    ///         the new allowance by unfortunate transaction ordering. To update\\n    ///         an allowance to a non-zero value please set it to zero first or\\n    ///         use `increaseBalanceAllowance` or `decreaseBalanceAllowance` for\\n    ///         an atomic update.\\n    /// @dev If the `amount` is set to `type(uint256).max`,\\n    ///      `transferBalanceFrom` will not reduce an allowance.\\n    /// @param spender The address that will be allowed to spend the balance.\\n    /// @param amount The amount the spender is allowed to spend.\\n    function approveBalance(address spender, uint256 amount) external {\\n        require(\\n            amount == 0 || allowance[msg.sender][spender] == 0,\\n            \\\"Non-atomic allowance change not allowed\\\"\\n        );\\n        _approveBalance(msg.sender, spender, amount);\\n    }\\n\\n    /// @notice Sets the `amount` as an allowance of a smart contract `spender`\\n    ///         over the caller's balance and calls the `spender` via\\n    ///         `receiveBalanceApproval`.\\n    /// @dev If the `amount` is set to `type(uint256).max`, the potential\\n    ///     `transferBalanceFrom` executed in `receiveBalanceApproval` of\\n    ///      `spender` will not reduce an allowance. Beware that changing an\\n    ///      allowance with this function brings the risk that `spender` may use\\n    ///      both the old and the new allowance by unfortunate transaction\\n    ///      ordering. Please use `increaseBalanceAllowance` and\\n    ///      `decreaseBalanceAllowance` to eliminate the risk.\\n    /// @param spender The smart contract that will be allowed to spend the\\n    ///        balance.\\n    /// @param amount The amount the spender contract is allowed to spend.\\n    /// @param extraData Extra data passed to the `spender` contract via\\n    ///        `receiveBalanceApproval` call.\\n    function approveBalanceAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes calldata extraData\\n    ) external {\\n        _approveBalance(msg.sender, spender, amount);\\n        IReceiveBalanceApproval(spender).receiveBalanceApproval(\\n            msg.sender,\\n            amount,\\n            extraData\\n        );\\n    }\\n\\n    /// @notice Atomically increases the caller's balance allowance granted to\\n    ///         `spender` by the given `addedValue`.\\n    /// @param spender The spender address for which the allowance is increased.\\n    /// @param addedValue The amount by which the allowance is increased.\\n    function increaseBalanceAllowance(address spender, uint256 addedValue)\\n        external\\n    {\\n        _approveBalance(\\n            msg.sender,\\n            spender,\\n            allowance[msg.sender][spender] + addedValue\\n        );\\n    }\\n\\n    /// @notice Atomically decreases the caller's balance allowance granted to\\n    ///         `spender` by the given `subtractedValue`.\\n    /// @dev Requirements:\\n    ///      - `spender` must not be the zero address,\\n    ///      - the current allowance for `spender` must not be lower than\\n    ///        the `subtractedValue`.\\n    /// @param spender The spender address for which the allowance is decreased.\\n    /// @param subtractedValue The amount by which the allowance is decreased.\\n    function decreaseBalanceAllowance(address spender, uint256 subtractedValue)\\n        external\\n    {\\n        uint256 currentAllowance = allowance[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"Can not decrease balance allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approveBalance(\\n                msg.sender,\\n                spender,\\n                currentAllowance - subtractedValue\\n            );\\n        }\\n    }\\n\\n    /// @notice Moves `amount` of balance from `spender` to `recipient` using the\\n    ///         allowance mechanism. `amount` is then deducted from the caller's\\n    ///         allowance unless the allowance was made for `type(uint256).max`.\\n    /// @dev Requirements:\\n    ///      - `recipient` cannot be the zero address,\\n    ///      - `spender` must have a balance of at least `amount`,\\n    ///      - the caller must have an allowance for `spender`'s balance of at\\n    ///        least `amount`.\\n    /// @param spender The address from which the balance is transferred.\\n    /// @param recipient The address to which the balance is transferred.\\n    /// @param amount The amount of balance that is transferred.\\n    function transferBalanceFrom(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        uint256 currentAllowance = allowance[spender][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            );\\n            unchecked {\\n                _approveBalance(spender, msg.sender, currentAllowance - amount);\\n            }\\n        }\\n        _transferBalance(spender, recipient, amount);\\n    }\\n\\n    /// @notice An EIP2612 approval made with secp256k1 signature. Users can\\n    ///         authorize a transfer of their balance with a signature\\n    ///         conforming to the EIP712 standard, rather than an on-chain\\n    ///         transaction from their address. Anyone can submit this signature\\n    ///         on the user's behalf by calling the `permit` function, paying\\n    ///         gas fees, and possibly performing other actions in the same\\n    ///         transaction.\\n    /// @dev The deadline argument can be set to `type(uint256).max to create\\n    ///      permits that effectively never expire.  If the `amount` is set\\n    ///      to `type(uint256).max` then `transferBalanceFrom` will not\\n    ///      reduce an allowance. Beware that changing an allowance with this\\n    ///      function brings the risk that someone may use both the old and the\\n    ///      new allowance by unfortunate transaction ordering. Please use\\n    ///      `increaseBalanceAllowance` and `decreaseBalanceAllowance` to\\n    ///      eliminate the risk.\\n    /// @param owner The balance owner who signed the permission.\\n    /// @param spender The address that will be allowed to spend the balance.\\n    /// @param amount The amount the spender is allowed to spend.\\n    /// @param deadline The UNIX time until which the permit is valid.\\n    /// @param v V part of the permit signature.\\n    /// @param r R part of the permit signature.\\n    /// @param s S part of the permit signature.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Permission expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        amount,\\n                        nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Invalid signature\\\"\\n        );\\n        _approveBalance(owner, spender, amount);\\n    }\\n\\n    /// @notice Increases balances of the provided `recipients` by the provided\\n    ///         `amounts`. Can only be called by the Bridge.\\n    /// @dev Requirements:\\n    ///       - length of `recipients` and `amounts` must be the same,\\n    ///       - none of `recipients` addresses must point to the Bank.\\n    /// @param recipients Balance increase recipients.\\n    /// @param amounts Amounts by which balances are increased.\\n    function increaseBalances(\\n        address[] calldata recipients,\\n        uint256[] calldata amounts\\n    ) external onlyBridge {\\n        require(\\n            recipients.length == amounts.length,\\n            \\\"Arrays must have the same length\\\"\\n        );\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            _increaseBalance(recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Increases balance of the provided `recipient` by the provided\\n    ///         `amount`. Can only be called by the Bridge.\\n    /// @dev Requirements:\\n    ///      - `recipient` address must not point to the Bank.\\n    /// @param recipient Balance increase recipient.\\n    /// @param amount Amount by which the balance is increased.\\n    function increaseBalance(address recipient, uint256 amount)\\n        external\\n        onlyBridge\\n    {\\n        _increaseBalance(recipient, amount);\\n    }\\n\\n    /// @notice Increases the given smart contract `vault`'s balance and\\n    ///         notifies the `vault` contract about it.\\n    ///         Can be called only by the Bridge.\\n    /// @dev Requirements:\\n    ///       - `vault` must implement `IVault` interface,\\n    ///       - length of `recipients` and `amounts` must be the same.\\n    /// @param vault Address of `IVault` recipient contract.\\n    /// @param recipients Balance increase recipients.\\n    /// @param amounts Amounts by which balances are increased.\\n    function increaseBalanceAndCall(\\n        address vault,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts\\n    ) external onlyBridge {\\n        require(\\n            recipients.length == amounts.length,\\n            \\\"Arrays must have the same length\\\"\\n        );\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            totalAmount += amounts[i];\\n        }\\n        _increaseBalance(vault, totalAmount);\\n        IVault(vault).receiveBalanceIncrease(recipients, amounts);\\n    }\\n\\n    /// @notice Decreases caller's balance by the provided `amount`. There is no\\n    ///         way to restore the balance so do not call this function unless\\n    ///         you really know what you are doing!\\n    /// @dev Requirements:\\n    ///      - The caller must have a balance of at least `amount`.\\n    /// @param amount The amount by which the balance is decreased.\\n    function decreaseBalance(uint256 amount) external {\\n        balanceOf[msg.sender] -= amount;\\n        emit BalanceDecreased(msg.sender, amount);\\n    }\\n\\n    /// @notice Returns hash of EIP712 Domain struct with `TMEWC Bank` as\\n    ///         a signing domain and Bank contract as a verifying contract.\\n    ///         Used to construct an EIP2612 signature provided to the `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        // As explained in EIP-2612, if the DOMAIN_SEPARATOR contains the\\n        // chainId and is defined at contract deployment instead of\\n        // reconstructed for every signature, there is a risk of possible replay\\n        // attacks between chains in the event of a future chain split.\\n        // To address this issue, we check the cached chain ID against the\\n        // current one and in case they are different, we build domain separator\\n        // from scratch.\\n        if (block.chainid == cachedChainId) {\\n            return cachedDomainSeparator;\\n        } else {\\n            return buildDomainSeparator();\\n        }\\n    }\\n\\n    function _increaseBalance(address recipient, uint256 amount) internal {\\n        require(\\n            recipient != address(this),\\n            \\\"Can not increase balance for Bank\\\"\\n        );\\n        balanceOf[recipient] += amount;\\n        emit BalanceIncreased(recipient, amount);\\n    }\\n\\n    function _transferBalance(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(\\n            recipient != address(0),\\n            \\\"Can not transfer to the zero address\\\"\\n        );\\n        require(\\n            recipient != address(this),\\n            \\\"Can not transfer to the Bank address\\\"\\n        );\\n\\n        uint256 spenderBalance = balanceOf[spender];\\n        require(spenderBalance >= amount, \\\"Transfer amount exceeds balance\\\");\\n        unchecked {\\n            balanceOf[spender] = spenderBalance - amount;\\n        }\\n        balanceOf[recipient] += amount;\\n        emit BalanceTransferred(spender, recipient, amount);\\n    }\\n\\n    function _approveBalance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(spender != address(0), \\\"Can not approve to the zero address\\\");\\n        allowance[owner][spender] = amount;\\n        emit BalanceApproved(owner, spender, amount);\\n    }\\n\\n    function buildDomainSeparator() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(\\\"TMEWC Bank\\\")),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x318005485bc8fb8a8fb6091bc4a3ca0e304693d8b372b61835bed2f1f735faf7\",\"license\":\"GPL-3.0-only\"},\"contracts/bank/IReceiveBalanceApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.17;\\n\\n/// @title IReceiveBalanceApproval\\n/// @notice `IReceiveBalanceApproval` is an interface for a smart contract\\n///         consuming Bank balances approved to them in the same transaction by\\n///         other contracts or externally owned accounts (EOA).\\ninterface IReceiveBalanceApproval {\\n    /// @notice Called by the Bank in `approveBalanceAndCall` function after\\n    ///         the balance `owner` approved `amount` of their balance in the\\n    ///         Bank for the contract. This way, the depositor can approve\\n    ///         balance and call the contract to use the approved balance in\\n    ///         a single transaction.\\n    /// @param owner Address of the Bank balance owner who approved their\\n    ///        balance to be used by the contract.\\n    /// @param amount The amount of the Bank balance approved by the owner\\n    ///        to be used by the contract.\\n    /// @param extraData The `extraData` passed to `Bank.approveBalanceAndCall`.\\n    /// @dev The implementation must ensure this function can only be called\\n    ///      by the Bank. The Bank does _not_ guarantee that the `amount`\\n    ///      approved by the `owner` currently exists on their balance. That is,\\n    ///      the `owner` could approve more balance than they currently have.\\n    ///      This works the same as `Bank.approve` function. The contract must\\n    ///      ensure the actual balance is checked before performing any action\\n    ///      based on it.\\n    function receiveBalanceApproval(\\n        address owner,\\n        uint256 amount,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x864f29d54d9d672348520b1f46bbce786994e07d86032987e4374a267a345c2b\",\"license\":\"GPL-3.0-only\"},\"contracts/vault/DonationVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"../bank/Bank.sol\\\";\\n\\n/// @title MEWC donation vault\\n/// @notice Vault that allows making MEWC donations to the system. Upon deposit,\\n///         this vault does not increase depositors' balances and always\\n///         decreases its own balance in the same transaction. The vault also\\n///         allows making donations using existing Bank balances.\\n///\\n///         BEWARE: ALL MEWC DEPOSITS TARGETING THIS VAULT ARE NOT REDEEMABLE\\n///         AND THERE IS NO WAY TO RESTORE THE DONATED BALANCE.\\n///         USE THIS VAULT ONLY WHEN YOU REALLY KNOW WHAT YOU ARE DOING!\\ncontract DonationVault is IVault {\\n    Bank public bank;\\n\\n    event DonationReceived(address donor, uint256 donatedAmount);\\n\\n    modifier onlyBank() {\\n        require(msg.sender == address(bank), \\\"Caller is not the Bank\\\");\\n        _;\\n    }\\n\\n    constructor(Bank _bank) {\\n        require(\\n            address(_bank) != address(0),\\n            \\\"Bank can not be the zero address\\\"\\n        );\\n\\n        bank = _bank;\\n    }\\n\\n    /// @notice Transfers the given `amount` of the Bank balance from the\\n    ///         caller to the Donation Vault and immediately decreases the\\n    ///         vault's balance in the Bank by the transferred `amount`.\\n    /// @param amount Amount of the Bank balance to donate.\\n    /// @dev Requirements:\\n    ///      - The caller's balance in the Bank must be greater than or equal\\n    ///        to the `amount`,\\n    ///      - Donation Vault must have an allowance for caller's balance in\\n    ///        the Bank for at least `amount`.\\n    function donate(uint256 amount) external {\\n        require(\\n            bank.balanceOf(msg.sender) >= amount,\\n            \\\"Amount exceeds balance in the bank\\\"\\n        );\\n\\n        emit DonationReceived(msg.sender, amount);\\n\\n        bank.transferBalanceFrom(msg.sender, address(this), amount);\\n        bank.decreaseBalance(amount);\\n    }\\n\\n    /// @notice Transfers the given `amount` of the Bank balance from the\\n    ///         `owner` to the Donation Vault and immediately decreases the\\n    ///         vault's balance in the Bank by the transferred `amount`.\\n    /// @param owner Address of the Bank balance owner who approved their\\n    ///        balance to be used by the vault.\\n    /// @param amount The amount of the Bank balance approved by the owner\\n    ///        to be used by the vault.\\n    /// @dev Requirements:\\n    ///      - Can only be called by the Bank via `approveBalanceAndCall`,\\n    ///      - The `owner` balance in the Bank must be greater than or equal\\n    ///        to the `amount`.\\n    function receiveBalanceApproval(\\n        address owner,\\n        uint256 amount,\\n        bytes memory\\n    ) external override onlyBank {\\n        require(\\n            bank.balanceOf(owner) >= amount,\\n            \\\"Amount exceeds balance in the bank\\\"\\n        );\\n\\n        emit DonationReceived(owner, amount);\\n\\n        bank.transferBalanceFrom(owner, address(this), amount);\\n        bank.decreaseBalance(amount);\\n    }\\n\\n    /// @notice Ignores the deposited amounts and does not increase depositors'\\n    ///         individual balances. The vault decreases its own tMEWC balance\\n    ///         in the Bank by the total deposited amount.\\n    /// @param depositors Addresses of depositors whose deposits have been swept.\\n    /// @param depositedAmounts Amounts deposited by individual depositors and\\n    ///        swept.\\n    /// @dev Requirements:\\n    ///      - Can only be called by the Bank after the Bridge swept deposits\\n    ///        and Bank increased balance for the vault,\\n    ///      - The `depositors` array must not be empty,\\n    ///      - The `depositors` array length must be equal to the\\n    ///        `depositedAmounts` array length.\\n    function receiveBalanceIncrease(\\n        address[] calldata depositors,\\n        uint256[] calldata depositedAmounts\\n    ) external override onlyBank {\\n        require(depositors.length != 0, \\\"No depositors specified\\\");\\n\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < depositors.length; i++) {\\n            totalAmount += depositedAmounts[i];\\n            emit DonationReceived(depositors[i], depositedAmounts[i]);\\n        }\\n\\n        bank.decreaseBalance(totalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x472b12a4fbff7d0d53bf675797d9a3d0fb32d5c7709b0b529b878b7b992f688f\",\"license\":\"GPL-3.0-only\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../bank/IReceiveBalanceApproval.sol\\\";\\n\\n/// @title Bank Vault interface\\n/// @notice `IVault` is an interface for a smart contract consuming Bank\\n///         balances of other contracts or externally owned accounts (EOA).\\ninterface IVault is IReceiveBalanceApproval {\\n    /// @notice Called by the Bank in `increaseBalanceAndCall` function after\\n    ///         increasing the balance in the Bank for the vault. It happens in\\n    ///         the same transaction in which deposits were swept by the Bridge.\\n    ///         This allows the depositor to route their deposit revealed to the\\n    ///         Bridge to the particular smart contract (vault) in the same\\n    ///         transaction in which the deposit is revealed. This way, the\\n    ///         depositor does not have to execute additional transaction after\\n    ///         the deposit gets swept by the Bridge to approve and transfer\\n    ///         their balance to the vault.\\n    /// @param depositors Addresses of depositors whose deposits have been swept.\\n    /// @param depositedAmounts Amounts deposited by individual depositors and\\n    ///        swept.\\n    /// @dev The implementation must ensure this function can only be called\\n    ///      by the Bank. The Bank guarantees that the vault's balance was\\n    ///      increased by the sum of all deposited amounts before this function\\n    ///      is called, in the same transaction.\\n    function receiveBalanceIncrease(\\n        address[] calldata depositors,\\n        uint256[] calldata depositedAmounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x12866d625abab349324ee28c6f6ec0114eaa7069ea0c5f7c7b23f6a0f833ae60\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a1d380380610a1d83398101604081905261002f916100ae565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820181905260248201527f42616e6b2063616e206e6f7420626520746865207a65726f2061646472657373604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100de565b6000602082840312156100c057600080fd5b81516001600160a01b03811681146100d757600080fd5b9392505050565b610930806100ed6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063461c637314610051578063475d05701461006657806376cdb03b14610079578063f14faf6f146100a8575b600080fd5b61006461005f3660046106df565b6100bb565b005b61006461007436600461077d565b610298565b60005461008c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100b6366004610848565b6104ca565b6000546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601660248201527f43616c6c6572206973206e6f74207468652042616e6b0000000000000000000060448201526064015b60405180910390fd5b600083900361016b5760405162461bcd60e51b815260206004820152601760248201527f4e6f206465706f7369746f7273207370656369666965640000000000000000006044820152606401610111565b6000805b848110156102325783838281811061018957610189610861565b905060200201358261019b919061088d565b91507f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c528686838181106101d0576101d0610861565b90506020020160208101906101e591906108a6565b8585848181106101f7576101f7610861565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a18061022a816108c8565b91505061016f565b5060005460405163392aee4360e01b8152600481018390526001600160a01b039091169063392aee4390602401600060405180830381600087803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146102f25760405162461bcd60e51b815260206004820152601660248201527f43616c6c6572206973206e6f74207468652042616e6b000000000000000000006044820152606401610111565b6000546040516370a0823160e01b81526001600160a01b038581166004830152849216906370a0823190602401602060405180830381865afa15801561033c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036091906108e1565b10156103b95760405162461bcd60e51b815260206004820152602260248201527f416d6f756e7420657863656564732062616c616e636520696e207468652062616044820152616e6b60f01b6064820152608401610111565b604080516001600160a01b0385168152602081018490527f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c52910160405180910390a1600054604051631f1b6d2760e21b81526001600160a01b0385811660048301523060248301526044820185905290911690637c6db49c90606401600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505060005460405163392aee4360e01b8152600481018690526001600160a01b03909116925063392aee439150602401600060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b50505050505050565b6000546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053691906108e1565b101561058f5760405162461bcd60e51b815260206004820152602260248201527f416d6f756e7420657863656564732062616c616e636520696e207468652062616044820152616e6b60f01b6064820152608401610111565b60408051338152602081018390527f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c52910160405180910390a1600054604051631f1b6d2760e21b8152336004820152306024820152604481018390526001600160a01b0390911690637c6db49c90606401600060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505060005460405163392aee4360e01b8152600481018590526001600160a01b03909116925063392aee439150602401600060405180830381600087803b15801561067857600080fd5b505af115801561068c573d6000803e3d6000fd5b5050505050565b60008083601f8401126106a557600080fd5b50813567ffffffffffffffff8111156106bd57600080fd5b6020830191508360208260051b85010111156106d857600080fd5b9250929050565b600080600080604085870312156106f557600080fd5b843567ffffffffffffffff8082111561070d57600080fd5b61071988838901610693565b9096509450602087013591508082111561073257600080fd5b5061073f87828801610693565b95989497509550505050565b80356001600160a01b038116811461076257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561079257600080fd5b61079b8461074b565b925060208401359150604084013567ffffffffffffffff808211156107bf57600080fd5b818601915086601f8301126107d357600080fd5b8135818111156107e5576107e5610767565b604051601f8201601f19908116603f0116810190838211818310171561080d5761080d610767565b8160405282815289602084870101111561082657600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561085a57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156108a0576108a0610877565b92915050565b6000602082840312156108b857600080fd5b6108c18261074b565b9392505050565b6000600182016108da576108da610877565b5060010190565b6000602082840312156108f357600080fd5b505191905056fea2646970667358221220477f34f7e107515e966ecf16b9041936f4c2020e109f50cc6c87a5e8d546499764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063461c637314610051578063475d05701461006657806376cdb03b14610079578063f14faf6f146100a8575b600080fd5b61006461005f3660046106df565b6100bb565b005b61006461007436600461077d565b610298565b60005461008c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100b6366004610848565b6104ca565b6000546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601660248201527f43616c6c6572206973206e6f74207468652042616e6b0000000000000000000060448201526064015b60405180910390fd5b600083900361016b5760405162461bcd60e51b815260206004820152601760248201527f4e6f206465706f7369746f7273207370656369666965640000000000000000006044820152606401610111565b6000805b848110156102325783838281811061018957610189610861565b905060200201358261019b919061088d565b91507f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c528686838181106101d0576101d0610861565b90506020020160208101906101e591906108a6565b8585848181106101f7576101f7610861565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a18061022a816108c8565b91505061016f565b5060005460405163392aee4360e01b8152600481018390526001600160a01b039091169063392aee4390602401600060405180830381600087803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146102f25760405162461bcd60e51b815260206004820152601660248201527f43616c6c6572206973206e6f74207468652042616e6b000000000000000000006044820152606401610111565b6000546040516370a0823160e01b81526001600160a01b038581166004830152849216906370a0823190602401602060405180830381865afa15801561033c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036091906108e1565b10156103b95760405162461bcd60e51b815260206004820152602260248201527f416d6f756e7420657863656564732062616c616e636520696e207468652062616044820152616e6b60f01b6064820152608401610111565b604080516001600160a01b0385168152602081018490527f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c52910160405180910390a1600054604051631f1b6d2760e21b81526001600160a01b0385811660048301523060248301526044820185905290911690637c6db49c90606401600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505060005460405163392aee4360e01b8152600481018690526001600160a01b03909116925063392aee439150602401600060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b50505050505050565b6000546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053691906108e1565b101561058f5760405162461bcd60e51b815260206004820152602260248201527f416d6f756e7420657863656564732062616c616e636520696e207468652062616044820152616e6b60f01b6064820152608401610111565b60408051338152602081018390527f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c52910160405180910390a1600054604051631f1b6d2760e21b8152336004820152306024820152604481018390526001600160a01b0390911690637c6db49c90606401600060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505060005460405163392aee4360e01b8152600481018590526001600160a01b03909116925063392aee439150602401600060405180830381600087803b15801561067857600080fd5b505af115801561068c573d6000803e3d6000fd5b5050505050565b60008083601f8401126106a557600080fd5b50813567ffffffffffffffff8111156106bd57600080fd5b6020830191508360208260051b85010111156106d857600080fd5b9250929050565b600080600080604085870312156106f557600080fd5b843567ffffffffffffffff8082111561070d57600080fd5b61071988838901610693565b9096509450602087013591508082111561073257600080fd5b5061073f87828801610693565b95989497509550505050565b80356001600160a01b038116811461076257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561079257600080fd5b61079b8461074b565b925060208401359150604084013567ffffffffffffffff808211156107bf57600080fd5b818601915086601f8301126107d357600080fd5b8135818111156107e5576107e5610767565b604051601f8201601f19908116603f0116810190838211818310171561080d5761080d610767565b8160405282815289602084870101111561082657600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561085a57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156108a0576108a0610877565b92915050565b6000602082840312156108b857600080fd5b6108c18261074b565b9392505050565b6000600182016108da576108da610877565b5060010190565b6000602082840312156108f357600080fd5b505191905056fea2646970667358221220477f34f7e107515e966ecf16b9041936f4c2020e109f50cc6c87a5e8d546499764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "donate(uint256)": {
        "details": "Requirements:      - The caller's balance in the Bank must be greater than or equal        to the `amount`,      - Donation Vault must have an allowance for caller's balance in        the Bank for at least `amount`.",
        "params": {
          "amount": "Amount of the Bank balance to donate."
        }
      },
      "receiveBalanceApproval(address,uint256,bytes)": {
        "details": "Requirements:      - Can only be called by the Bank via `approveBalanceAndCall`,      - The `owner` balance in the Bank must be greater than or equal        to the `amount`.",
        "params": {
          "amount": "The amount of the Bank balance approved by the owner        to be used by the vault.",
          "owner": "Address of the Bank balance owner who approved their        balance to be used by the vault."
        }
      },
      "receiveBalanceIncrease(address[],uint256[])": {
        "details": "Requirements:      - Can only be called by the Bank after the Bridge swept deposits        and Bank increased balance for the vault,      - The `depositors` array must not be empty,      - The `depositors` array length must be equal to the        `depositedAmounts` array length.",
        "params": {
          "depositedAmounts": "Amounts deposited by individual depositors and        swept.",
          "depositors": "Addresses of depositors whose deposits have been swept."
        }
      }
    },
    "title": "MEWC donation vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "donate(uint256)": {
        "notice": "Transfers the given `amount` of the Bank balance from the         caller to the Donation Vault and immediately decreases the         vault's balance in the Bank by the transferred `amount`."
      },
      "receiveBalanceApproval(address,uint256,bytes)": {
        "notice": "Transfers the given `amount` of the Bank balance from the         `owner` to the Donation Vault and immediately decreases the         vault's balance in the Bank by the transferred `amount`."
      },
      "receiveBalanceIncrease(address[],uint256[])": {
        "notice": "Ignores the deposited amounts and does not increase depositors'         individual balances. The vault decreases its own tMEWC balance         in the Bank by the total deposited amount."
      }
    },
    "notice": "Vault that allows making MEWC donations to the system. Upon deposit,         this vault does not increase depositors' balances and always         decreases its own balance in the same transaction. The vault also         allows making donations using existing Bank balances.         BEWARE: ALL MEWC DEPOSITS TARGETING THIS VAULT ARE NOT REDEEMABLE         AND THERE IS NO WAY TO RESTORE THE DONATED BALANCE.         USE THIS VAULT ONLY WHEN YOU REALLY KNOW WHAT YOU ARE DOING!",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33060,
        "contract": "contracts/vault/DonationVault.sol:DonationVault",
        "label": "bank",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Bank)18611"
      }
    ],
    "types": {
      "t_contract(Bank)18611": {
        "encoding": "inplace",
        "label": "contract Bank",
        "numberOfBytes": "20"
      }
    }
  }
}