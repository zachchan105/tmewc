{
  "language": "Solidity",
  "sources": {
    "contracts/bridge/VendingMachine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\";\n\nimport \"../token/TMEWC.sol\";\nimport \"../GovernanceUtils.sol\";\n\n/// @title TMEWC Vending Machine\n/// @notice The Vending Machine is the owner of TMEWC token and can mint\n///         TMEWC tokens in 1:1 ratio from TMEWC v1 tokens with TMEWC v1\n///         deposited in the contract as collateral. TMEWC can be\n///         unminted back to TMEWC v1 with or without a fee - fee parameter is\n///         controlled by the Governance. This implementation acts as a bridge\n///         between TMEWC v1 and TMEWC token, allowing to mint TMEWC before\n///         the system is ready and fully operational without sacrificing any\n///         security guarantees and decentralization of the project.\n///         Vending Machine can be upgraded in a two-step, governance-controlled\n///         process. The new version of the Vending Machine will receive the\n///         ownership of TMEWC token and entire TMEWC v1 balance stored as\n///         collateral. It is expected that this process will be executed before\n///         the v2 system launch. There is an optional unmint fee with a value\n///         that can be updated in a two-step, governance-controlled process.\n///         All governable parameters are controlled by two roles: update\n///         initiator and finalizer. There is a separate initiator role for\n///         unmint fee update and vending machine upgrade. The initiator\n///         proposes the change by initiating the update and the finalizer\n///         (contract owner) may approve it by finalizing the change after the\n///         governance delay passes.\ncontract VendingMachine is Ownable, IReceiveApproval {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for TMEWC;\n\n    /// @notice The time delay that needs to pass between initializing and\n    ///         finalizing update of any governable parameter in this contract.\n    uint256 public constant GOVERNANCE_DELAY = 7 days;\n\n    /// @notice Divisor for precision purposes. Used to represent fractions\n    ///         in parameter values.\n    uint256 public constant FLOATING_POINT_DIVISOR = 1e18;\n\n    IERC20 public immutable tmewcV1;\n    TMEWC public immutable tmewcV2;\n\n    /// @notice The fee for unminting TMEWC back into TMEWC v1 represented as\n    ///         1e18 precision fraction. The fee is proportional to the amount\n    ///         being unminted and added on the top of the amount being unminted.\n    ///         To calculate the fee value, the amount being unminted needs\n    ///         to be multiplied by `unmintFee` and divided by 1e18.\n    ///         For example, `unmintFee` set to 1000000000000000\n    ///         means that 0.001 of the amount being unminted needs to be paid\n    ///         to the `VendingMachine` as an unminting fee on the top of the\n    ///         amount being unminted.\n    uint256 public unmintFee;\n    uint256 public newUnmintFee;\n    uint256 public unmintFeeUpdateInitiatedTimestamp;\n    address public unmintFeeUpdateInitiator;\n\n    /// @notice The address of a new vending machine. Set only when the upgrade\n    ///         process is pending. Once the upgrade gets finalized, the new\n    ///         vending machine will become an owner of TMEWC token.\n    address public newVendingMachine;\n    uint256 public vendingMachineUpgradeInitiatedTimestamp;\n    address public vendingMachineUpgradeInitiator;\n\n    event UnmintFeeUpdateInitiated(uint256 newUnmintFee, uint256 timestamp);\n    event UnmintFeeUpdated(uint256 newUnmintFee);\n\n    event VendingMachineUpgradeInitiated(\n        address newVendingMachine,\n        uint256 timestamp\n    );\n    event VendingMachineUpgraded(address newVendingMachine);\n\n    event Minted(address indexed recipient, uint256 amount);\n    event Unminted(address indexed recipient, uint256 amount, uint256 fee);\n\n    modifier only(address authorizedCaller) {\n        require(msg.sender == authorizedCaller, \"Caller is not authorized\");\n        _;\n    }\n\n    modifier onlyAfterGovernanceDelay(uint256 changeInitiatedTimestamp) {\n        GovernanceUtils.onlyAfterGovernanceDelay(\n            changeInitiatedTimestamp,\n            GOVERNANCE_DELAY\n        );\n        _;\n    }\n\n    constructor(\n        IERC20 _tmewcV1,\n        TMEWC _tmewcV2,\n        uint256 _unmintFee\n    ) {\n        tmewcV1 = _tmewcV1;\n        tmewcV2 = _tmewcV2;\n        unmintFee = _unmintFee;\n\n        unmintFeeUpdateInitiator = msg.sender;\n        vendingMachineUpgradeInitiator = msg.sender;\n    }\n\n    /// @notice Mints TMEWC to the caller from TMEWC v1 with 1:1 ratio.\n    ///         The caller needs to have at least `amount` of TMEWC v1 balance\n    ///         approved for transfer to the `VendingMachine` before calling\n    ///         this function.\n    /// @param amount The amount of TMEWC to mint from TMEWC v1\n    function mint(uint256 amount) external {\n        _mint(msg.sender, amount);\n    }\n\n    /// @notice Mints TMEWC to `from` address from TMEWC v1 with 1:1 ratio.\n    ///         `from` address needs to have at least `amount` of TMEWC v1\n    ///         balance approved for transfer to the `VendingMachine` before\n    ///         calling this function.\n    /// @dev This function is a shortcut for approve + mint. Only TMEWC v1\n    ///      caller is allowed and only TMEWC v1 is allowed as a token to\n    ///      transfer.\n    /// @param from TMEWC v1 token holder minting TMEWC tokens\n    /// @param amount The amount of TMEWC to mint from TMEWC v1\n    /// @param token TMEWC v1 token address\n    function receiveApproval(\n        address from,\n        uint256 amount,\n        address token,\n        bytes calldata\n    ) external override {\n        require(token == address(tmewcV1), \"Token is not TMEWC v1\");\n        require(msg.sender == address(tmewcV1), \"Only TMEWC v1 caller allowed\");\n        _mint(from, amount);\n    }\n\n    /// @notice Unmints TMEWC from the caller into TMEWC v1. Depending on\n    ///         `unmintFee` value, may require paying an additional unmint fee\n    ///         in TMEWC in addition to the amount being unminted. To see\n    ///         what is the value of the fee, please call `unmintFeeFor(amount)`\n    ///         function. The caller needs to have at least\n    ///         `amount + unmintFeeFor(amount)` of TMEWC balance approved for\n    ///         transfer to the `VendingMachine` before calling this function.\n    /// @param amount The amount of TMEWC to unmint to TMEWC v1\n    function unmint(uint256 amount) external {\n        uint256 fee = unmintFeeFor(amount);\n        emit Unminted(msg.sender, amount, fee);\n\n        require(\n            tmewcV2.balanceOf(msg.sender) >= amount + fee,\n            \"Amount + fee exceeds TMEWC balance\"\n        );\n\n        tmewcV2.safeTransferFrom(msg.sender, address(this), fee);\n        tmewcV2.burnFrom(msg.sender, amount);\n        tmewcV1.safeTransfer(msg.sender, amount);\n    }\n\n    /// @notice Allows the Governance to withdraw unmint fees accumulated by\n    ///         `VendingMachine`.\n    /// @param recipient The address receiving the fees\n    /// @param amount The amount of fees in TMEWC to withdraw\n    function withdrawFees(address recipient, uint256 amount)\n        external\n        onlyOwner\n    {\n        tmewcV2.safeTransfer(recipient, amount);\n    }\n\n    /// @notice Initiates unmint fee update process. The update process needs to\n    ///         be finalized with a call to `finalizeUnmintFeeUpdate` function\n    ///         after the `GOVERNANCE_DELAY` passes. Only unmint fee update\n    ///         initiator role can initiate the update.\n    /// @param _newUnmintFee The new unmint fee\n    function initiateUnmintFeeUpdate(uint256 _newUnmintFee)\n        external\n        only(unmintFeeUpdateInitiator)\n    {\n        /* solhint-disable-next-line not-rely-on-time */\n        emit UnmintFeeUpdateInitiated(_newUnmintFee, block.timestamp);\n        newUnmintFee = _newUnmintFee;\n        /* solhint-disable-next-line not-rely-on-time */\n        unmintFeeUpdateInitiatedTimestamp = block.timestamp;\n    }\n\n    /// @notice Allows the contract owner to finalize unmint fee update process.\n    ///         The update process needs to be first initiated with a call to\n    ///         `initiateUnmintFeeUpdate` and the `GOVERNANCE_DELAY` needs to\n    ///         pass.\n    function finalizeUnmintFeeUpdate()\n        external\n        onlyOwner\n        onlyAfterGovernanceDelay(unmintFeeUpdateInitiatedTimestamp)\n    {\n        emit UnmintFeeUpdated(newUnmintFee);\n        unmintFee = newUnmintFee;\n        newUnmintFee = 0;\n        unmintFeeUpdateInitiatedTimestamp = 0;\n    }\n\n    /// @notice Initiates vending machine upgrade process. The upgrade process\n    ///          needs to be finalized with a call to\n    ///         `finalizeVendingMachineUpgrade` function after the\n    ///         `GOVERNANCE_DELAY` passes. Only vending machine upgrade\n    ///         initiator role can initiate the upgrade.\n    /// @param _newVendingMachine The new vending machine address\n    function initiateVendingMachineUpgrade(address _newVendingMachine)\n        external\n        only(vendingMachineUpgradeInitiator)\n    {\n        require(\n            _newVendingMachine != address(0),\n            \"New VendingMachine cannot be zero address\"\n        );\n\n        emit VendingMachineUpgradeInitiated(\n            _newVendingMachine,\n            /* solhint-disable-next-line not-rely-on-time */\n            block.timestamp\n        );\n        newVendingMachine = _newVendingMachine;\n        /* solhint-disable-next-line not-rely-on-time */\n        vendingMachineUpgradeInitiatedTimestamp = block.timestamp;\n    }\n\n    /// @notice Allows the contract owner to finalize vending machine upgrade\n    ///         process. The upgrade process needs to be first initiated with a\n    ///         call to `initiateVendingMachineUpgrade` and the `GOVERNANCE_DELAY`\n    ///         needs to pass. Once the upgrade is finalized, the new vending\n    ///         machine will become an owner of TMEWC token and all TMEWC v1\n    ///         held by this contract will be transferred to the new vending\n    ///         machine.\n    function finalizeVendingMachineUpgrade()\n        external\n        onlyOwner\n        onlyAfterGovernanceDelay(vendingMachineUpgradeInitiatedTimestamp)\n    {\n        emit VendingMachineUpgraded(newVendingMachine);\n        //slither-disable-next-line reentrancy-no-eth\n        tmewcV2.transferOwnership(newVendingMachine);\n        tmewcV1.safeTransfer(newVendingMachine, tmewcV1.balanceOf(address(this)));\n        newVendingMachine = address(0);\n        vendingMachineUpgradeInitiatedTimestamp = 0;\n    }\n\n    /// @notice Transfers unmint fee update initiator role to another address.\n    ///         Can be called only by the current unmint fee update initiator.\n    /// @param newInitiator The new unmint fee update initiator\n    function transferUnmintFeeUpdateInitiatorRole(address newInitiator)\n        external\n        only(unmintFeeUpdateInitiator)\n    {\n        require(\n            newInitiator != address(0),\n            \"New initiator must not be zero address\"\n        );\n        unmintFeeUpdateInitiator = newInitiator;\n    }\n\n    /// @notice Transfers vending machine upgrade initiator role to another\n    ///         address. Can be called only by the current vending machine\n    ///         upgrade initiator.\n    /// @param newInitiator The new vending machine upgrade initator\n    function transferVendingMachineUpgradeInitiatorRole(address newInitiator)\n        external\n        only(vendingMachineUpgradeInitiator)\n    {\n        require(\n            newInitiator != address(0),\n            \"New initiator must not be zero address\"\n        );\n        vendingMachineUpgradeInitiator = newInitiator;\n    }\n\n    /// @notice Get the remaining time that needs to pass until unmint fee\n    ///         update can be finalized by the Governance. If the update has\n    ///         not been initiated, the function reverts.\n    function getRemainingUnmintFeeUpdateTime() external view returns (uint256) {\n        return\n            GovernanceUtils.getRemainingGovernanceDelay(\n                unmintFeeUpdateInitiatedTimestamp,\n                GOVERNANCE_DELAY\n            );\n    }\n\n    /// @notice Get the remaining time that needs to pass until vending machine\n    ///         upgrade can be finalized by the Governance. If the upgrade has\n    ///         not been initiated, the function reverts.\n    function getRemainingVendingMachineUpgradeTime()\n        external\n        view\n        returns (uint256)\n    {\n        return\n            GovernanceUtils.getRemainingGovernanceDelay(\n                vendingMachineUpgradeInitiatedTimestamp,\n                GOVERNANCE_DELAY\n            );\n    }\n\n    /// @notice Calculates the fee that needs to be paid to the `VendingMachine`\n    ///         to unmint the given amount of TMEWC back into TMEWC v1.\n    function unmintFeeFor(uint256 amount) public view returns (uint256) {\n        return (amount * unmintFee) / FLOATING_POINT_DIVISOR;\n    }\n\n    function _mint(address tokenOwner, uint256 amount) internal {\n        emit Minted(tokenOwner, amount);\n        tmewcV1.safeTransferFrom(tokenOwner, address(this), amount);\n        tmewcV2.mint(tokenOwner, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/// @notice An interface that should be implemented by contracts supporting\n///         `approveAndCall`/`receiveApproval` pattern.\ninterface IReceiveApproval {\n    /// @notice Receives approval to spend tokens. Called as a result of\n    ///         `approveAndCall` call on the token.\n    function receiveApproval(\n        address from,\n        uint256 amount,\n        address token,\n        bytes calldata extraData\n    ) external;\n}\n"
    },
    "contracts/token/TMEWC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\";\nimport \"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\";\n\ncontract TMEWC is ERC20WithPermit, MisfundRecovery {\n    constructor() ERC20WithPermit(\"tMEWC\", \"tMEWC\") {}\n}\n"
    },
    "contracts/GovernanceUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nlibrary GovernanceUtils {\n    /// @notice Reverts if the governance delay has not passed since\n    ///         the change initiated time or if the change has not been\n    ///         initiated.\n    /// @param changeInitiatedTimestamp The timestamp at which the change has\n    ///        been initiated.\n    /// @param delay Governance delay.\n    function onlyAfterGovernanceDelay(\n        uint256 changeInitiatedTimestamp,\n        uint256 delay\n    ) internal view {\n        require(changeInitiatedTimestamp > 0, \"Change not initiated\");\n        require(\n            /* solhint-disable-next-line not-rely-on-time */\n            block.timestamp - changeInitiatedTimestamp >= delay,\n            \"Governance delay has not elapsed\"\n        );\n    }\n\n    /// @notice Gets the time remaining until the governable parameter update\n    ///         can be committed.\n    /// @param changeInitiatedTimestamp Timestamp indicating the beginning of\n    ///        the change\n    /// @param delay Governance delay\n    /// @return Remaining time in seconds\n    function getRemainingGovernanceDelay(\n        uint256 changeInitiatedTimestamp,\n        uint256 delay\n    ) internal view returns (uint256) {\n        require(changeInitiatedTimestamp > 0, \"Change not initiated\");\n        /* solhint-disable-next-line not-rely-on-time */\n        uint256 elapsed = block.timestamp - changeInitiatedTimestamp;\n        if (elapsed >= delay) {\n            return 0;\n        } else {\n            return delay - elapsed;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./IERC20WithPermit.sol\";\nimport \"./IReceiveApproval.sol\";\n\n/// @title  ERC20WithPermit\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\n///         authorize a transfer of their token with a signature conforming\n///         EIP712 standard instead of an on-chain transaction from their\n///         address. Anyone can submit this signature on the user's behalf by\n///         calling the permit function, as specified in EIP2612 standard,\n///         paying gas fees, and possibly performing other actions in the same\n///         transaction.\ncontract ERC20WithPermit is IERC20WithPermit, Ownable {\n    /// @notice The amount of tokens owned by the given account.\n    mapping(address => uint256) public override balanceOf;\n\n    /// @notice The remaining number of tokens that spender will be\n    ///         allowed to spend on behalf of owner through `transferFrom` and\n    ///         `burnFrom`. This is zero by default.\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    /// @notice Returns the current nonce for EIP2612 permission for the\n    ///         provided token owner for a replay protection. Used to construct\n    ///         EIP2612 signature provided to `permit` function.\n    mapping(address => uint256) public override nonces;\n\n    uint256 public immutable cachedChainId;\n    bytes32 public immutable cachedDomainSeparator;\n\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\n    ///         signature provided to `permit` function.\n    bytes32 public constant override PERMIT_TYPEHASH =\n        keccak256(\n            \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n        );\n\n    /// @notice The amount of tokens in existence.\n    uint256 public override totalSupply;\n\n    /// @notice The name of the token.\n    string public override name;\n\n    /// @notice The symbol of the token.\n    string public override symbol;\n\n    /// @notice The decimals places of the token.\n    uint8 public constant override decimals = 18;\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n\n        cachedChainId = block.chainid;\n        cachedDomainSeparator = buildDomainSeparator();\n    }\n\n    /// @notice Moves `amount` tokens from the caller's account to `recipient`.\n    /// @return True if the operation succeeded, reverts otherwise.\n    /// @dev Requirements:\n    ///       - `recipient` cannot be the zero address,\n    ///       - the caller must have a balance of at least `amount`.\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /// @notice Moves `amount` tokens from `sender` to `recipient` using the\n    ///         allowance mechanism. `amount` is then deducted from the caller's\n    ///         allowance unless the allowance was made for `type(uint256).max`.\n    /// @return True if the operation succeeded, reverts otherwise.\n    /// @dev Requirements:\n    ///      - `sender` and `recipient` cannot be the zero address,\n    ///      - `sender` must have a balance of at least `amount`,\n    ///      - the caller must have allowance for `sender`'s tokens of at least\n    ///        `amount`.\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        uint256 currentAllowance = allowance[sender][msg.sender];\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"Transfer amount exceeds allowance\"\n            );\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n    /// @notice EIP2612 approval made with secp256k1 signature.\n    ///         Users can authorize a transfer of their tokens with a signature\n    ///         conforming EIP712 standard, rather than an on-chain transaction\n    ///         from their address. Anyone can submit this signature on the\n    ///         user's behalf by calling the permit function, paying gas fees,\n    ///         and possibly performing other actions in the same transaction.\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\n    ///         permits that effectively never expire.  If the `amount` is set\n    ///         to `type(uint256).max` then `transferFrom` and `burnFrom` will\n    ///         not reduce an allowance.\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        /* solhint-disable-next-line not-rely-on-time */\n        require(deadline >= block.timestamp, \"Permission expired\");\n\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\n        // Only signatures with `s` value in the lower half of the secp256k1\n        // curve's order and `v` value of 27 or 28 are considered valid.\n        require(\n            uint256(s) <=\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"Invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"Invalid signature 'v' value\");\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR(),\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        owner,\n                        spender,\n                        amount,\n                        nonces[owner]++,\n                        deadline\n                    )\n                )\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(\n            recoveredAddress != address(0) && recoveredAddress == owner,\n            \"Invalid signature\"\n        );\n        _approve(owner, spender, amount);\n    }\n\n    /// @notice Creates `amount` tokens and assigns them to `account`,\n    ///         increasing the total supply.\n    /// @dev Requirements:\n    ///      - `recipient` cannot be the zero address.\n    function mint(address recipient, uint256 amount) external onlyOwner {\n        require(recipient != address(0), \"Mint to the zero address\");\n\n        beforeTokenTransfer(address(0), recipient, amount);\n\n        totalSupply += amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(address(0), recipient, amount);\n    }\n\n    /// @notice Destroys `amount` tokens from the caller.\n    /// @dev Requirements:\n    ///       - the caller must have a balance of at least `amount`.\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    /// @notice Destroys `amount` of tokens from `account` using the allowance\n    ///         mechanism. `amount` is then deducted from the caller's allowance\n    ///         unless the allowance was made for `type(uint256).max`.\n    /// @dev Requirements:\n    ///      - `account` must have a balance of at least `amount`,\n    ///      - the caller must have allowance for `account`'s tokens of at least\n    ///        `amount`.\n    function burnFrom(address account, uint256 amount) external override {\n        uint256 currentAllowance = allowance[account][msg.sender];\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"Burn amount exceeds allowance\"\n            );\n            _approve(account, msg.sender, currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n\n    /// @notice Calls `receiveApproval` function on spender previously approving\n    ///         the spender to withdraw from the caller multiple times, up to\n    ///         the `amount` amount. If this function is called again, it\n    ///         overwrites the current allowance with `amount`. Reverts if the\n    ///         approval reverted or if `receiveApproval` call on the spender\n    ///         reverted.\n    /// @return True if both approval and `receiveApproval` calls succeeded.\n    /// @dev If the `amount` is set to `type(uint256).max` then\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes memory extraData\n    ) external override returns (bool) {\n        if (approve(spender, amount)) {\n            IReceiveApproval(spender).receiveApproval(\n                msg.sender,\n                amount,\n                address(this),\n                extraData\n            );\n            return true;\n        }\n        return false;\n    }\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's\n    ///         tokens.\n    /// @return True if the operation succeeded.\n    /// @dev If the `amount` is set to `type(uint256).max` then\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\n    ///      Beware that changing an allowance with this method brings the risk\n    ///      that someone may use both the old and the new allowance by\n    ///      unfortunate transaction ordering. One possible solution to mitigate\n    ///      this race condition is to first reduce the spender's allowance to 0\n    ///      and set the desired value afterwards:\n    ///      https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\n    ///         a signing domain and token contract as a verifying contract.\n    ///         Used to construct EIP2612 signature provided to `permit`\n    ///         function.\n    /* solhint-disable-next-line func-name-mixedcase */\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n        // As explained in EIP-2612, if the DOMAIN_SEPARATOR contains the\n        // chainId and is defined at contract deployment instead of\n        // reconstructed for every signature, there is a risk of possible replay\n        // attacks between chains in the event of a future chain split.\n        // To address this issue, we check the cached chain ID against the\n        // current one and in case they are different, we build domain separator\n        // from scratch.\n        if (block.chainid == cachedChainId) {\n            return cachedDomainSeparator;\n        } else {\n            return buildDomainSeparator();\n        }\n    }\n\n    /// @dev Hook that is called before any transfer of tokens. This includes\n    ///      minting and burning.\n    ///\n    /// Calling conditions:\n    /// - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\n    ///   will be to transferred to `to`.\n    /// - when `from` is zero, `amount` tokens will be minted for `to`.\n    /// - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n    /// - `from` and `to` are never both zero.\n    // slither-disable-next-line dead-code\n    function beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _burn(address account, uint256 amount) internal {\n        uint256 currentBalance = balanceOf[account];\n        require(currentBalance >= amount, \"Burn amount exceeds balance\");\n\n        beforeTokenTransfer(account, address(0), amount);\n\n        balanceOf[account] = currentBalance - amount;\n        totalSupply -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        require(sender != address(0), \"Transfer from the zero address\");\n        require(recipient != address(0), \"Transfer to the zero address\");\n        require(recipient != address(this), \"Transfer to the token address\");\n\n        beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = balanceOf[sender];\n        require(senderBalance >= amount, \"Transfer amount exceeds balance\");\n        balanceOf[sender] = senderBalance - amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"Approve from the zero address\");\n        require(spender != address(0), \"Approve to the zero address\");\n        allowance[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function buildDomainSeparator() private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                    ),\n                    keccak256(bytes(name)),\n                    keccak256(bytes(\"1\")),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n}\n"
    },
    "@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/// @title  MisfundRecovery\n/// @notice Allows the owner of the token contract extending MisfundRecovery\n///         to recover any ERC20 and ERC721 sent mistakenly to the token\n///         contract address.\ncontract MisfundRecovery is Ownable {\n    using SafeERC20 for IERC20;\n\n    function recoverERC20(\n        IERC20 token,\n        address recipient,\n        uint256 amount\n    ) external onlyOwner {\n        token.safeTransfer(recipient, amount);\n    }\n\n    function recoverERC721(\n        IERC721 token,\n        address recipient,\n        uint256 tokenId,\n        bytes calldata data\n    ) external onlyOwner {\n        token.safeTransferFrom(address(this), recipient, tokenId, data);\n    }\n}\n"
    },
    "@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"./IApproveAndCall.sol\";\n\n/// @title  IERC20WithPermit\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\n///         authorize a transfer of their token with a signature conforming\n///         EIP712 standard instead of an on-chain transaction from their\n///         address. Anyone can submit this signature on the user's behalf by\n///         calling the permit function, as specified in EIP2612 standard,\n///         paying gas fees, and possibly performing other actions in the same\n///         transaction.\ninterface IERC20WithPermit is IERC20, IERC20Metadata, IApproveAndCall {\n    /// @notice EIP2612 approval made with secp256k1 signature.\n    ///         Users can authorize a transfer of their tokens with a signature\n    ///         conforming EIP712 standard, rather than an on-chain transaction\n    ///         from their address. Anyone can submit this signature on the\n    ///         user's behalf by calling the permit function, paying gas fees,\n    ///         and possibly performing other actions in the same transaction.\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\n    ///         permits that effectively never expire.\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /// @notice Destroys `amount` tokens from the caller.\n    function burn(uint256 amount) external;\n\n    /// @notice Destroys `amount` of tokens from `account`, deducting the amount\n    ///         from caller's allowance.\n    function burnFrom(address account, uint256 amount) external;\n\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\n    ///         a signing domain and token contract as a verifying contract.\n    ///         Used to construct EIP2612 signature provided to `permit`\n    ///         function.\n    /* solhint-disable-next-line func-name-mixedcase */\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Returns the current nonce for EIP2612 permission for the\n    ///         provided token owner for a replay protection. Used to construct\n    ///         EIP2612 signature provided to `permit` function.\n    function nonces(address owner) external view returns (uint256);\n\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\n    ///         signature provided to `permit` function.\n    /* solhint-disable-next-line func-name-mixedcase */\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/// @notice An interface that should be implemented by tokens supporting\n///         `approveAndCall`/`receiveApproval` pattern.\ninterface IApproveAndCall {\n    /// @notice Executes `receiveApproval` function on spender as specified in\n    ///         `IReceiveApproval` interface. Approves spender to withdraw from\n    ///         the caller multiple times, up to the `amount`. If this\n    ///         function is called again, it overwrites the current allowance\n    ///         with `amount`. Reverts if the approval reverted or if\n    ///         `receiveApproval` call on the spender reverted.\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes memory extraData\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/test/ReceiveApprovalStub.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"../token/TMEWC.sol\";\n\ncontract ReceiveApprovalStub is IReceiveApproval {\n    bool public shouldRevert;\n\n    event ApprovalReceived(\n        address from,\n        uint256 value,\n        address token,\n        bytes extraData\n    );\n\n    function receiveApproval(\n        address from,\n        uint256 value,\n        address token,\n        bytes calldata extraData\n    ) external override {\n        if (shouldRevert) {\n            revert(\"i am your father luke\");\n        }\n\n        emit ApprovalReceived(from, value, token, extraData);\n    }\n\n    function setShouldRevert(bool _shouldRevert) external {\n        shouldRevert = _shouldRevert;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\";\n\ncontract TestERC20 is ERC20WithPermit {\n    string public constant NAME = \"Test ERC20 Token\";\n    string public constant SYMBOL = \"TT\";\n\n    constructor() ERC20WithPermit(NAME, SYMBOL) {}\n}\n"
    },
    "contracts/test/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract TestERC721 is ERC721 {\n    string public constant NAME = \"Test ERC721 Token\";\n    string public constant SYMBOL = \"TT\";\n\n    constructor() ERC721(NAME, SYMBOL) {}\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
